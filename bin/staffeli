#!/usr/bin/env python3

import argparse, os.path, yaml, canvas, sys, re

from canvas import Canvas, Course

def mknewdir(path):
    if os.path.exists(path):
        raise Exception((
                "You already exists a file or directory \"{}\".\n" +
                "Please rename or remove this first."
            ).format(path))
    os.mkdir(path)

def cache(o, dirpath):
    if not os.path.isdir(dirpath):
        os.mkdir(dirpath)
    o.cache(dirpath)

def clone(args):
    dirname = " ".join(args)

    course = Canvas().course(name = dirname)
    mknewdir(dirname)
    course.cache(dirname)

    os.chdir(dirname)
    fetch_students(course)
    fetch_groups(course)

def fetch_students(course):
    print("Fetching students..")
    cache(course.list_students(), "students")

def fetch_groups(course):
    print("Fetching group categories..")
    gcs = course.list_group_categories()
    cache(gcs, "groups")

    print("Fetching group lists for each category..")
    for gc in gcs.json:
        gl = canvas.GroupList(course, id = gc['id'])
        print("Fetched {}.".format(gc['name']))
        gl.cache(os.path.join("groups", gc['name'] + ".yml"))

def fetch_group(course, name):
    gl = canvas.GroupList(course, name = name)
    if not os.path.isdir("groups"):
        os.mkdir("groups")
    path = os.path.join("groups", gl.name + ".yml")
    gl.cache(path)
    print("Fetched {} as {}.".format(name, path))

def fetch(args):
    course = Course()
    what = args[0]
    args = args[1:]
    if what == "students":
        fetch_students(course)
    elif what == "groups":
        fetch_groups(course)
    elif what == "group":
        fetch_group(course, " ".join(args))
    else:
        raise Exception("Don't yet know how to fetch {}.".format(str(args)))

def main_args_parser():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=
"""
git-style, git-compatible command-line interface for canvas.

start a working area
    clone   Create a local clone for a course

update a working area
    fetch   Fetch something that might have changed
""")
    parser.add_argument(
        "action", metavar="ACTION",
        help="the action to perform")
    return parser

def parse_action_arg(parser, args):
    args, remargs = parser.parse_known_args(args)
    if args.action == "help":
        parser.print_help()
        sys.exit(0)
    return args.action, remargs

def main():
    parser = main_args_parser()
    action, remargs = parse_action_arg(parser, sys.argv[1:])

    if action == "clone":
        clone(remargs)
    elif action == "fetch":
        fetch(remargs)
    else:
        print("Unknown action {}.".format(action))
        parser.print_usage()

if __name__ == "__main__":
    main()
