#!/usr/bin/env python3

import argparse, os.path, yaml, canvas, sys, re

from canvas import Canvas

def dir_name(name):
    dir_name = re.sub("[^a-zA-Z0-9-]", '_', name)
    if name != dir_name:
        print((
                "I don't like the name \"{}\".\n" +
                "Creating a directory called \"{}\" instead."
            ).format(name, dir_name))
    if os.path.exists(dir_name):
        raise Exception(
            "You already got a directory or file named '{}'.\n \
            Please rename or remove this in order to set up TA environment.".format(dir_name))
    return dir_name

def clone(args):
    name = " ".join(args)

    course = Canvas().course(name = name.lower())

    course_dir_name = dir_name(name)
    os.mkdir(course_dir_name)

    course.backup(course_dir_name)

#    os.mkdir(os.path.join(course_dir_name, "students"))

#    json = c.all_students(course.id)
#    students_path = os.path.join(course_dir_name, "students", "students.yaml")
#    with open(students_path, 'w') as f:
#        yaml.dump(json, f, default_flow_style=False, encoding='utf-8')


def main_args_parser():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=
"""
git-style, git-compatible command-line interface for canvas.

start a working area
    clone    Create a local clone for a course
""")
    parser.add_argument(
        "action", metavar="ACTION",
        help="the action to perform")
    return parser

def parse_action_arg(parser, args):
    args, remargs = parser.parse_known_args(args)
    if args.action == "help":
        parser.print_help()
        sys.exit(0)
    return args.action, remargs

def main():
    parser = main_args_parser()
    action, remargs = parse_action_arg(parser, sys.argv[1:])

    if action == "clone":
        clone(remargs)
    else:
        print("Unknown action {}.".format(action))
        parser.print_usage()

if __name__ == "__main__":
    main()
